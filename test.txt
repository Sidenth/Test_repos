# Работа с репозиториями GitHub

3333333

333333


3333333

# Инструкция по работе с Git #

Для того, чтобы создать пустой репозиторий, нужно:

> git init

Чтобы начать сохранение файла с именем file name, нужно:

> git add file_name или git add .

Создание коммита (комментарий для программистов):

> git commit -m message "yor_text"

Журнал всех коммитов:

> git log

Чтобы вернуться к кокому-то коммиту, нужно:
> git checkout <хэш_код>
> git checkout master (вернуться к последней версии)

Чтобы увидеть разницу между текщим и закоммиченным файлом, нужно:
> git diff

Чтобы оформить цитату, используется знак (>), его можно вставлять как перед каждой строкой цитаты, так и только перед первой строкой параграфа.
Например:
> На марсе классно.
» Красные пески, крутые горы и кратеры.
»> Безумно красивые каналы рядом с экватором. (с) Noize MC.

Чтобы вставить изображение в текст, достаточно написать следующее:
![Иди странствуй 8 лет](4618245.jpg)

Чтобы вставить ссылку, необходимо обрамить ее круглыми скобками
Например
[Ссыока на поисковую систему] (https://www.google.ru/)

Чтобы выделить текст курсивом, необходимо обрамить его звездочками (*) или знаком нижнего подчеркивания. Например, *вот так* или _вот так_

Чтобы выделить текст полужирным, необходимо обрамить его двойными звездочками (**) или двойными знаками нижнего подчеркивания.
Например, **вот так** или __вот так__

Альтернативные способы выделения текста жирным или курсивом нужны для того, чтобы мы могли совмещать оба этих способа.
Например, _текст может быть выделен курсивом и при этом быит **полужирным**_.


Чтобы выделить ненумерованный список, используйте (*)
Чтобы выделить текст курсивом, необходимо обрамить его звездочками (*), Например, *вот так*

Чтобы выделить текст полужирным, необходимо обрамить его двойными звездочками (**).
Например, **вот так**


Чтобы добавить ненумерованные списки, необходимо пункты выделить звездочкой (*).
Например, вот так:
* Элемент 1
* Элемент 2
* Элемент 3

Чтобы добавить нумерованные списки, необходимо пункты просто пронумеровать.
Например, вот так:
1. Первый пункт
2. Второй пункт

Чтобы вывести все ветки на экран, мы используем

> git branch

Чтобы сосдать новую ветку, мы используем команду:
+ git branch branch_name

## Новые команды:
+ git commit -a -m "message" - сохранение **текущего** файла и коммит
+ git checkout -b branch_name - создание и переход к ветке с именем branch_name

Чтобы перейти к дургой ветке, мы используем:
1. git checkout <название ветки>
Чтобы удалить ветку с замерженными изменениями, мы используем:
+ git branch -d branch_name

Чтобы удалить ветку с не замерженными изменениями, мы используем:
+ git branch -D branch_name

Чтобы закэшировать учетные данные, используется команда:
> git config —global credential.helper cache
Для работы в Git, необходимо задать свои имя пользователя и электронную почту.

Для того, чтобы задать имя пользователя, мы использкем команду:
> git config —global user.name "Your name"

Для того, чтобы привязать электронную почту, мы используем команду:
git config —global user.email your_email@.com

Чтобы просмотреть полный список изменений, внесенных конкретным коммитом, используется команда show с указанием индентификатора или хеш коммита:
> git show 1af17e73721dbe0c40011b82ed4bb1a7dbe3ce29
> git show 1af17e

Чтобы переименовать файл или папку можно параметром mv. Для него указывается источник source и назначение destination. Источник — реально существующий файл или папка, а назначение — существующая папка.
> git mv dir1/somefile.js dir2

Чтобы откатить последний коммит, мы используем команду revert, с помощью которого создастся новый коммит, содержащий обратные преобразования относительно предыдущего, и добавится к истории текущей ветки.
> git revert HEAD

Команда git fetch связывается с удалённым репозиторием и забирает из него все изменения, которых у вас пока нет и сохраняет их локально.
> git fetch [remote-name]

Для того, чтобы отправить изменения в удаленный репозиторий, используется команда push с указанием имени репозитория и

Google
www.google.ru
ветки. Эта команда передаёт локальные изменения в центральный репозиторий, где с ними могут ознакомиться другие участники проекта.

> git push origin main

Для загрузки изменений из удалённого репозитория используется параметр pull. Он скачивает копию текущей ветки с указанного удалённого репозитория и объединяет её с локальной копией.

> git pull